package visitor;

import syntaxtree.*;

import java.util.*;
import errorMsg.*;

// the purpose of this class is to
// - link each ClassDecl to the ClassDecl for its superclass (via
//   its 'superLink'
// - link each ClassDecl to each of its subclasses (via the
//   'subclasses' instance variable
// - ensure that there are no cycles in the inheritance hierarchy
// - ensure that no class has 'String' or 'RunMain' as its superclass
public class Sem2Visitor extends ASTvisitor {
	
	Hashtable<String,ClassDecl> globalSymTab;
	ErrorMsg errorMsg;
	
	public Sem2Visitor(Hashtable<String,ClassDecl> globalSymTb, ErrorMsg e) {
		errorMsg = e;
		initInstanceVars(globalSymTb);
	}

	private void initInstanceVars(Hashtable<String,ClassDecl> globalTab) {
		globalSymTab = globalTab;
	}
	
	public Object visitProgram(Program n) {
		// traversal of subnodes
		super.visitProgram(n);
		
		int counter = 0;
		for(ClassDecl classDecl : n.classDecls){
			if(classDecl.name.equals("String")){
				errorMsg.error(n.pos,"Error:  Class has a superclass of String");
				return null;
			}
			if(classDecl.name.equals("RunMain")){
				errorMsg.error(n.pos,"Error:  Class has a superclass of RunMain");
				return null;
			}
			if(classDecl == null){
				errorMsg.error(n.pos,"Error: Class is part of a cycle, hit the end of the superclass");
				return null;
			}
			if(globalSymTab.size() > counter){
				errorMsg.error(n.pos,"Error: Class is part of a cycle, iterate more times than the number of classes");
				return null;
			}
			if(classDecl.superName.equals(classDecl.name)){
				errorMsg.error(n.pos,"Error: Class is part of a cycle, superclass hit itself");
				return null;
			}
			if(classDecl.superLink != null){
				counter ++;
			}
		}
		
		
		return null;
	}
	
}

	
