package visitor;

import syntaxtree.*;

import java.util.*;

import errorMsg.*;
// The purpose of this class is to do type-checking and related
// actions.  These include:
// - evaluate the type for each expression, filling in the 'type'
//   link for each
// - ensure that each expression follows MiniJava's type rules (e.g.,
//   that the arguments to '*' are both integer, the argument to
//   '.length' is an array, etc.)
// - ensure that each method-call follows Java's type rules:
//   - there exists a method for the given class (or a superclass)
//     for the receiver's object type
//   - the method has the correct number of parameters
//   - the types of each actual parameter is compatible with that
//     of its corresponding formal parameter
// - ensure that for each instance variable access (e.g., abc.foo),
//   there is an instance variable defined for the given class (or
//   in a superclass
//   - sets the 'varDec' link in the InstVarAccess to refer to the
//     method
// - ensure that the RHS expression in each assignment statement is
//   type-compatible with its corresponding LHS
//   - also checks that the LHS an lvalue
// - ensure that if a method with a given name is defined in both
//   a subclass and a superclass, that they have the same parameters
//   (with identical types) and the same return type
// - ensure that the declared return-type of a method is compatible
//   with its "return" expression
// - ensuring that the type of the control expression for an if- or
//   while-statement is boolean
public class Sem4Visitor extends ASTvisitor {
	
	ClassDecl currentClass;
	IdentifierType currentClassType;
	IdentifierType currentSuperclassType;
	ErrorMsg errorMsg;
	Hashtable<String,ClassDecl> globalSymTab;
	
	BooleanType theBoolType;
	IntegerType theIntType;
	NullType theNullType;
	VoidType theVoidType;
	IdentifierType theStringType;
	
	public Sem4Visitor(Hashtable<String,ClassDecl> globalSymTb, ErrorMsg e) {
		globalSymTab = globalSymTb;
		errorMsg = e;
		initInstanceVars();
	}

	private void initInstanceVars() {
		currentClass = null;
		
		theBoolType = new BooleanType(-1);
		theIntType = new IntegerType(-1);
		theNullType = new NullType(-1);
		theVoidType = new VoidType(-1);
		if (globalSymTab != null) {
			theStringType = new IdentifierType(-1, "String");
			theStringType.link = globalSymTab.get("String");
		}
	}
	
	public boolean matchTypesExact(Type have, Type need, int pos){
		if(have == null || need == null){
			return false;
		}
		else if(have.equals(need)){
			return true;
		}
		
		if(pos >= 0){
			errorMsg.error(pos,"Error: Incompatible types");
		}
		return false;	
	}
	
	public boolean matchTypesAssign(Type src, Type target, int pos){
		if(src == null || target == null){
			return false;
		}
		else if((src instanceof VoidType) || (target instanceof VoidType)){
			errorMsg.error(pos,"Error: Incompatible types");
		}
		else if(src.equals(target)){
			return true;
		}
		
		if(src instanceof NullType){
			return true;
		}
		
		if((target instanceof IdentifierType) || (target instanceof ArrayType)){
			return true;
		}
		
		if((src instanceof ArrayType) && (target instanceof IdentifierType) && (((IdentifierType)target).name.equals("Object"))){
			return true;
		}
		
//		TODO: Check with nick on this one
		if(src instanceof IdentifierType){
			if(((IdentifierType)target).link.subclasses.contains(((IdentifierType) src).link)){
				return true;
			}
		}
		else if(pos >= 0){
			errorMsg.error(pos,"Error: Incompatible types");
		}
		
		return false;
	}
	
	public boolean matchTypesEqCompare(Type t1, Type t2, int pos){
		if(t1 == null || t2 == null){
			return false;
		}
		else if(matchTypesAssign(t1, t2, -1)){
			return true;
		}
		else if(matchTypesAssign(t2, t1, -1)){
			return true;
		}
		if(pos >= 0){
			errorMsg.error(pos,"Error: Incompatible types");
		}	
		return false;
	}
	
	public InstVarDecl instVarLookup(String name, ClassDecl clas, int pos, String msg){
		if(clas.instVarTable.containsKey(name)){
			return clas.instVarTable.get(clas);
		}
		else if(instVarLookupHelp(name, clas) != null){
			return instVarLookupHelp(name, clas);
		}
		else{
			errorMsg.error(pos,msg);
		}
		
		
		return null;
	}
	
	public InstVarDecl instVarLookupHelp(String name, ClassDecl sup){
		if(sup.instVarTable.containsKey(name)){
			return sup.instVarTable.get(sup);
		}
		else if(sup.superLink == null){
			return null;
		}
		
		return instVarLookupHelp(name, sup.superLink);
	}
}
	
